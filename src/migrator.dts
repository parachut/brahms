import algoliasearch from 'algoliasearch';
import pick from 'lodash/pick';

import { Category } from './models/Category';
import { Product } from './models/Product';

const client = algoliasearch(
  process.env.ALGOLIA_APPID,
  process.env.ALGOLIA_SECRET,
);

const index = client.initIndex('prod_Products');

export const migrator = async (req, res) => {
  const products = await Product.findAll({
    include: ['brand', 'category'],
  });

  const categories = await Category.findAll({});

  function findBreadCrumbs(cat: Category) {
    const _categories = [cat];

    const getParent = async (child: Category) => {
      if (child.parentId) {
        const parent = categories.find((cate) => cate.id === child.parentId);

        if (parent) {
          _categories.push(parent);

          if (parent.parentId) {
            getParent(parent);
          }
        }
      }
    };

    getParent(cat);

    return _categories;
  }

  const records = [];

  for (const product of products) {
    const record = {
      objectID: product.id,
      ...pick(product, [
        'name',
        'popularity',
        'demand',
        'description',
        'features',
        'lastInventoryCreated',
        'mfr',
        'stock',
        'slug',
        'points',
      ]),
      brand: product.brand.name,
      categories: product.category
        ? findBreadCrumbs(product.category)
            .reverse()
            .reduce((r, c, i) => {
              r[`lvl${i}`] = c.name;
              return r;
            }, {})
        : {},
    };

    records.push(record);
  }

  index.saveObjects(records, (err, content) => {
    console.log(content);
  });

  res.send(200);
};
