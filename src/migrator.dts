import { calcDailyCommission, calcDailyRate } from './utils/calc';
import { differenceInCalendarDays, addDays } from 'date-fns';
import last from 'lodash/last';
import sortBy from 'lodash/sortBy';
import { Op } from 'sequelize';

import { Inventory } from './models/Inventory';
import { Income } from './models/Income';
import { Shipment } from './models/Shipment';
import { ShipmentDirection } from './enums/shipmentDirection';
import { ShipmentType } from './enums/shipmentType';

export const migrator = async (req, res) => {
  const inventory = await Inventory.findAll({
    where: {
      userId: { [Op.ne]: '367c7df6-3f36-4df6-abf3-5ea7c2418878' },
    },
    include: [
      {
        association: 'shipments',
        include: ['user'],
        order: [['carrierReceivedAt', 'ASC']],
      },
      {
        association: 'product',
      },
    ],
  });

  for (const item of inventory) {
    const groups: any[] = [];

    let shipments = item.shipments
      .filter((ship) => ship.type === ShipmentType.ACCESS)
      .filter(
        (ship) =>
          (ship.direction === ShipmentDirection.OUTBOUND &&
            ship.carrierDeliveredAt) ||
          (ship.direction === ShipmentDirection.INBOUND &&
            ship.carrierReceivedAt),
      );

    shipments = sortBy(shipments, (ship) =>
      ship.carrierReceivedAt
        ? ship.carrierReceivedAt.getTime()
        : ship.carrierDeliveredAt.getTime(),
    );

    console.log(
      shipments.map((ship) => ({
        id: ship.id,
        direction: ship.direction,
        carrierReceivedAt: ship.carrierReceivedAt,
      })),
    );

    shipments
      .filter((ship) => ship.type === ShipmentType.ACCESS)
      .forEach((shipment, i) => {
        if (
          shipment.direction === ShipmentDirection.OUTBOUND &&
          shipment.carrierDeliveredAt
        ) {
          const access: any = {
            out: shipment.carrierDeliveredAt,
            in: null,
            shipment,
          };

          groups.push(access);
        } else if (
          shipment.direction === ShipmentDirection.INBOUND &&
          shipment.carrierReceivedAt
        ) {
          console.log(groups, item.id);
          last(groups).in = shipment.carrierReceivedAt;
        }
      });

    for (const access of groups) {
      access.days = differenceInCalendarDays(
        access.in ? access.in : new Date(),
        access.out,
      );

      console.log(access.days, access.in, access.out);

      console.log(access.shipment.id);

      const mapped = [];

      for (let i = 0; i < access.days; i++) {
        mapped.push({
          planId: access.shipment.user.planId,
          commission: calcDailyCommission(item.product.points),
          membership: !!access.shipment.user.planId,
          dailyRate: calcDailyRate(item.product.points),
          memberId: access.shipment.user.id,
          userId: item.userId,
          inventoryId: item.id,
          createdAt: addDays(access.out, i),
        });
      }

      Income.bulkCreate(mapped);
    }
  }

  res.send(200);
};
